{
  "l": {
    "name": "l",
    "description": "Загружает var устройства в регистр.",
    "example": "l r? d? logicType"
  },
  "s": {
    "name": "s",
    "description": "Записывает значение регистра в var на устройстве.",
    "example": "s d? logicType r?"
  },
  "ls": {
    "name": "ls",
    "description": "Загружает слот переменной устройства в регистр.",
    "example": "ls r? d? slotIndex logicSlotType"
  },
  "lr": {
    "name": "lr",
    "description": "Loads reagent of device's ReagentMode where a hash of the reagent type to check for. ReagentMode can be either Contents (0), Required (1), Recipe (2). Can use either the word, or the number.",
    "example": "lr r? d? reagentMode int"
  },
  "sb": {
    "name": "sb",
    "description": "Записывает значение регистра в var на всех выходных сетевых устройствах с предоставленным типом хеша.",
    "example": "sb deviceHash logicType r?"
  },
  "lb": {
    "name": "lb",
    "description": "Loads LogicType from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "example": "lb r? deviceHash logicType batchMode"
  },
  "alias": {
    "name": "alias",
    "description": "Метки регистра или ссылка на устройство с именем, ссылки на устройства также влияют на то, что показано на винтах на основании IC.",
    "example": "alias str r?|d?"
  },
  "move": {
    "name": "move",
    "description": "Регистр = числовое значение или значение регистра.",
    "example": "move r? a(r?|num)"
  },
  "add": {
    "name": "add",
    "description": "Регистр = a + b.",
    "example": "add r? a(r?|num) b(r?|num)"
  },
  "sub": {
    "name": "sub",
    "description": "Регистр = a - b.",
    "example": "sub r? a(r?|num) b(r?|num)"
  },
  "sdse": {
    "name": "sdse",
    "description": "Регистр = 1, если устройство заданно, иначе 0.",
    "example": "sdse r? d?"
  },
  "sdns": {
    "name": "sdns",
    "description": "Регистр = 1, если устройство не задано, иначе 0",
    "example": "sdns r? d?"
  },
  "slt": {
    "name": "slt",
    "description": "Регистр = 1, если a < b, иначе 0",
    "example": "slt r? a(r?|num) b(r?|num)"
  },
  "sgt": {
    "name": "sgt",
    "description": "Регистр = 1, если a > b, иначе 0",
    "example": "sgt r? a(r?|num) b(r?|num)"
  },
  "sle": {
    "name": "sle",
    "description": "Регистр = 1, если a <= b, иначе 0",
    "example": "sle r? a(r?|num) b(r?|num)"
  },
  "sge": {
    "name": "sge",
    "description": "Регистр = 1, если a >= b, иначе 0",
    "example": "sge r? a(r?|num) b(r?|num)"
  },
  "seq": {
    "name": "seq",
    "description": "Регистр = 1, если a == b, иначе 0",
    "example": "seq r? a(r?|num) b(r?|num)"
  },
  "sne": {
    "name": "sne",
    "description": "Регистр = 1, если a != b, иначе 0",
    "example": "sne r? a(r?|num) b(r?|num)"
  },
  "sap": {
    "name": "sap",
    "description": "Регистр = 1, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), иначе 0",
    "example": "sap r? a(r?|num) b(r?|num) c(r?|num)"
  },
  "sna": {
    "name": "sna",
    "description": "Регистр = 1, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), иначе 0",
    "example": "sna r? a(r?|num) b(r?|num) c(r?|num)"
  },
  "and": {
    "name": "and",
    "description": "Performs a bitwise logical AND operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 1, the resulting bit is set to 1. Otherwise the resulting bit is set to 0.",
    "example": "and r? a(r?|num) b(r?|num)"
  },
  "or": {
    "name": "or",
    "description": "Performs a bitwise logical OR operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If either bit is 1, the resulting bit is set to 1. If both bits are 0, the resulting bit is set to 0.",
    "example": "or r? a(r?|num) b(r?|num)"
  },
  "xor": {
    "name": "xor",
    "description": "Performs a bitwise logical XOR (exclusive OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If the bits are different (one bit is 0 and the other is 1), the resulting bit is set to 1. If the bits are the same (both 0 or both 1), the resulting bit is set to 0.",
    "example": "xor r? a(r?|num) b(r?|num)"
  },
  "nor": {
    "name": "nor",
    "description": "Performs a bitwise logical NOR (NOT OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 0, the resulting bit is set to 1. Otherwise, if at least one bit is 1, the resulting bit is set to 0.",
    "example": "nor r? a(r?|num) b(r?|num)"
  },
  "mul": {
    "name": "mul",
    "description": "Регистр = a \\* b",
    "example": "mul r? a(r?|num) b(r?|num)"
  },
  "div": {
    "name": "div",
    "description": "Регистр = a / b",
    "example": "div r? a(r?|num) b(r?|num)"
  },
  "mod": {
    "name": "mod",
    "description": "Регистр = a mod b (примечание: НЕ a % b)",
    "example": "mod r? a(r?|num) b(r?|num)"
  },
  "j": {
    "name": "j",
    "description": "Переход на строку a",
    "example": "j int"
  },
  "bltz": {
    "name": "bltz",
    "description": "Ответвление на строку b, если a < 0",
    "example": "bltz a(r?|num) b(r?|num)"
  },
  "bgez": {
    "name": "bgez",
    "description": "Ответвление на строку b, если a >= 0",
    "example": "bgez a(r?|num) b(r?|num)"
  },
  "blez": {
    "name": "blez",
    "description": "Ответвление на строку b, если a <= 0",
    "example": "blez a(r?|num) b(r?|num)"
  },
  "bgtz": {
    "name": "bgtz",
    "description": "Ответвление на строку b, если a > 0",
    "example": "bgtz a(r?|num) b(r?|num)"
  },
  "bdse": {
    "name": "bdse",
    "description": "Ответвление на строку a, если устройство d установлено",
    "example": "bdse d? a(r?|num)"
  },
  "bdns": {
    "name": "bdns",
    "description": "Ответвление на строку a, если устройство d не установлено",
    "example": "bdns d? a(r?|num)"
  },
  "beq": {
    "name": "beq",
    "description": "Ответвление на строку c, если a == b",
    "example": "beq a(r?|num) b(r?|num) c(r?|num)"
  },
  "bne": {
    "name": "bne",
    "description": "Ответвление на строку c, если a != b",
    "example": "bne a(r?|num) b(r?|num) c(r?|num)"
  },
  "bap": {
    "name": "bap",
    "description": "Ответвление на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
    "example": "bap a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "bna": {
    "name": "bna",
    "description": "Ответвление на строку d, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
    "example": "bna a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "jal": {
    "name": "jal",
    "description": "Переход на строку a и сохранение номера следующей строки в ra",
    "example": "jal int"
  },
  "brdse": {
    "name": "brdse",
    "description": "Относительный переход на строку a, если устройство не установлено",
    "example": "brdse d? a(r?|num)"
  },
  "brdns": {
    "name": "brdns",
    "description": "Относительный переход на строку a, если устройство не установлено",
    "example": "brdns d? a(r?|num)"
  },
  "bltzal": {
    "name": "bltzal",
    "description": "Ответвление на строку b, если a < 0, и сохранение номера следующей строки в ra",
    "example": "bltzal a(r?|num) b(r?|num)"
  },
  "bgezal": {
    "name": "bgezal",
    "description": "Ответвление на строку b, если a >= 0, и сохранение номера следующей строки в ra",
    "example": "bgezal a(r?|num) b(r?|num)"
  },
  "blezal": {
    "name": "blezal",
    "description": "Ответвление на строку b, если a <= 0, и сохранение номера следующей строки в ra",
    "example": "blezal a(r?|num) b(r?|num)"
  },
  "bgtzal": {
    "name": "bgtzal",
    "description": "Ответвление на строку b, если a > 0, и сохранение номера следующей строки в ra",
    "example": "bgtzal a(r?|num) b(r?|num)"
  },
  "beqal": {
    "name": "beqal",
    "description": "Ответвление на строку c, если a == b, и сохранение номера следующей строки в ra",
    "example": "beqal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bneal": {
    "name": "bneal",
    "description": "Ответвление на строку c, если a != b, и сохранение номера следующей строки в ra",
    "example": "bneal a(r?|num) b(r?|num) c(r?|num)"
  },
  "jr": {
    "name": "jr",
    "description": "Переход на строку А относительно текущей",
    "example": "jr int"
  },
  "bdseal": {
    "name": "bdseal",
    "description": "Переход на строку a и сохранение номера следующей строки, если устройство установлено",
    "example": "bdseal d? a(r?|num)"
  },
  "bdnsal": {
    "name": "bdnsal",
    "description": "Переход на строку a и сохранение номера следующей строки, если устройство не установлено",
    "example": "bdnsal d? a(r?|num)"
  },
  "brltz": {
    "name": "brltz",
    "description": "Относительный переход на строку b, если a < 0",
    "example": "brltz a(r?|num) b(r?|num)"
  },
  "brgez": {
    "name": "brgez",
    "description": "Относительный переход на строку b, если a >= 0",
    "example": "brgez a(r?|num) b(r?|num)"
  },
  "brlez": {
    "name": "brlez",
    "description": "Относительный переход на строку b, если a <= 0",
    "example": "brlez a(r?|num) b(r?|num)"
  },
  "brgtz": {
    "name": "brgtz",
    "description": "Относительный переход на строку b, если a > 0",
    "example": "brgtz a(r?|num) b(r?|num)"
  },
  "breq": {
    "name": "breq",
    "description": "Относительный переход на строку c, если a == b",
    "example": "breq a(r?|num) b(r?|num) c(r?|num)"
  },
  "brne": {
    "name": "brne",
    "description": "Относительный переход на строку c, если a != b",
    "example": "brne a(r?|num) b(r?|num) c(r?|num)"
  },
  "brap": {
    "name": "brap",
    "description": "Относительный переход на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
    "example": "brap a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "brna": {
    "name": "brna",
    "description": "Относительный переход на строку d, если abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
    "example": "brna a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "sqrt": {
    "name": "sqrt",
    "description": "Регистр = квадратный корень из a",
    "example": "sqrt r? a(r?|num)"
  },
  "round": {
    "name": "round",
    "description": "Регистр = a, округлённое до ближайшего целого числа",
    "example": "round r? a(r?|num)"
  },
  "trunc": {
    "name": "trunc",
    "description": "Регистр = a с удалённой дробной частью",
    "example": "trunc r? a(r?|num)"
  },
  "ceil": {
    "name": "ceil",
    "description": "Регистр = наименьшее целое число больше a",
    "example": "ceil r? a(r?|num)"
  },
  "floor": {
    "name": "floor",
    "description": "Регистр = наибольше целое число меньше чем a",
    "example": "floor r? a(r?|num)"
  },
  "max": {
    "name": "max",
    "description": "Регистр = максимум из a или b",
    "example": "max r? a(r?|num) b(r?|num)"
  },
  "min": {
    "name": "min",
    "description": "Регистр = минимум из a или b",
    "example": "min r? a(r?|num) b(r?|num)"
  },
  "abs": {
    "name": "abs",
    "description": "Регистр = абсолютное значение a",
    "example": "abs r? a(r?|num)"
  },
  "log": {
    "name": "log",
    "description": "Регистр = log(a)",
    "example": "log r? a(r?|num)"
  },
  "exp": {
    "name": "exp",
    "description": "Регистр = exp(a)",
    "example": "exp r? a(r?|num)"
  },
  "rand": {
    "name": "rand",
    "description": "Регистр = случайное значение x между 0 <= x < 1",
    "example": "rand r?"
  },
  "yield": {
    "name": "yield",
    "description": "Приостановка выполнения на 1 тик (0,5 секунд)",
    "example": "yield"
  },
  "label": {
    "name": "label",
    "description": "НЕ РЕКОМЕНДУЕТСЯ",
    "example": "label d? str"
  },
  "peek": {
    "name": "peek",
    "description": "Регистр = значение верхнего стека",
    "example": "peek r?"
  },
  "push": {
    "name": "push",
    "description": "Помещает значение a в стек и увеличивает sp",
    "example": "push a(r?|num)"
  },
  "pop": {
    "name": "pop",
    "description": "Регистр = значение верхнего стека и уменьшает sp",
    "example": "pop r?"
  },
  "hcf": {
    "name": "hcf",
    "description": "Остановиться и загореться",
    "example": "hcf"
  },
  "select": {
    "name": "select",
    "description": "Регистр = b, если ненулевой, иначе с",
    "example": "select r? a(r?|num) b(r?|num) c(r?|num)"
  },
  "blt": {
    "name": "blt",
    "description": "Ответвление на строку c, если a < b",
    "example": "blt a(r?|num) b(r?|num) c(r?|num)"
  },
  "bgt": {
    "name": "bgt",
    "description": "Ответвление на строку c, если a > b",
    "example": "bgt a(r?|num) b(r?|num) c(r?|num)"
  },
  "ble": {
    "name": "ble",
    "description": "Ответвление на строку c, если a <= b",
    "example": "ble a(r?|num) b(r?|num) c(r?|num)"
  },
  "bge": {
    "name": "bge",
    "description": "Ответвление на строку c, если a >= b",
    "example": "bge a(r?|num) b(r?|num) c(r?|num)"
  },
  "brlt": {
    "name": "brlt",
    "description": "Относительный переход на строку c, если a < b",
    "example": "brlt a(r?|num) b(r?|num) c(r?|num)"
  },
  "brgt": {
    "name": "brgt",
    "description": "относительный переход на строку c, если a > b",
    "example": "brgt a(r?|num) b(r?|num) c(r?|num)"
  },
  "brle": {
    "name": "brle",
    "description": "Относительный переход на строку c, если a <= b",
    "example": "brle a(r?|num) b(r?|num) c(r?|num)"
  },
  "brge": {
    "name": "brge",
    "description": "Относительный переход на строку c, если a >= b",
    "example": "brge a(r?|num) b(r?|num) c(r?|num)"
  },
  "bltal": {
    "name": "bltal",
    "description": "Ответвление на строку c, если a < b, и сохранение номера следующей строки в ra",
    "example": "bltal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bgtal": {
    "name": "bgtal",
    "description": "Ответвление на строку c, если a > b, и сохранение номера следующей строки в ra",
    "example": "bgtal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bleal": {
    "name": "bleal",
    "description": "Ответвление на строку c, если a <= b, и сохранение номера следующей строки в ra",
    "example": "bleal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bgeal": {
    "name": "bgeal",
    "description": "Ответвление на строку c, если a >= b, и сохранение номера следующей строки в ra",
    "example": "bgeal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bapal": {
    "name": "bapal",
    "description": "Ответвление на строку c, если a != b, и сохранение номера следующей строки в ra",
    "example": "bapal a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "bnaal": {
    "name": "bnaal",
    "description": "Ответвление на строку d, если abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), и сохранение номера следующей строки в ra",
    "example": "bnaal a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
  },
  "beqz": {
    "name": "beqz",
    "description": "Ответвление на строку b, если a == 0",
    "example": "beqz a(r?|num) b(r?|num)"
  },
  "bnez": {
    "name": "bnez",
    "description": "ответвление на строку b, если a != 0",
    "example": "bnez a(r?|num) b(r?|num)"
  },
  "bapz": {
    "name": "bapz",
    "description": "Ответвление на строку c, если abs(a) <= float.epsilon \\* 8",
    "example": "bapz a(r?|num) b(r?|num) c(r?|num)"
  },
  "bnaz": {
    "name": "bnaz",
    "description": "Ответвление на строку c, если abs(a) > float.epsilon \\* 8",
    "example": "bnaz a(r?|num) b(r?|num) c(r?|num)"
  },
  "breqz": {
    "name": "breqz",
    "description": "Относительный переход на строку b, если a == 0",
    "example": "breqz a(r?|num) b(r?|num)"
  },
  "brnez": {
    "name": "brnez",
    "description": "Относительный переход на строку b, если a != 0",
    "example": "brnez a(r?|num) b(r?|num)"
  },
  "brapz": {
    "name": "brapz",
    "description": "Относительный переход на строку c, если abs(a) <= float.epsilon \\* 8",
    "example": "brapz a(r?|num) b(r?|num) c(r?|num)"
  },
  "brnaz": {
    "name": "brnaz",
    "description": "Относительный переход на строку c, если abs(a) > float.epsilon \\* 8",
    "example": "brnaz a(r?|num) b(r?|num) c(r?|num)"
  },
  "beqzal": {
    "name": "beqzal",
    "description": "Ответвление на строку b, если a == 0, и сохранение номера следующей строки в ra",
    "example": "beqzal a(r?|num) b(r?|num)"
  },
  "bnezal": {
    "name": "bnezal",
    "description": "Ответвление на строку b, если a != 0, и сохранение номера следующей строки в ra",
    "example": "bnezal a(r?|num) b(r?|num)"
  },
  "bapzal": {
    "name": "bapzal",
    "description": "Ответвление на строку c, если abs(a) <= float.epsilon \\* 8",
    "example": "bapzal a(r?|num) b(r?|num) c(r?|num)"
  },
  "bnazal": {
    "name": "bnazal",
    "description": "Ответвление на строку c, если abs(a) > float.epsilon \\* 8",
    "example": "bnazal a(r?|num) b(r?|num) c(r?|num)"
  },
  "sltz": {
    "name": "sltz",
    "description": "Регистр = 1, если a < 0, иначе 0",
    "example": "sltz r? a(r?|num)"
  },
  "sgtz": {
    "name": "sgtz",
    "description": "Регистр = 1, если a > 0, иначе 0",
    "example": "sgtz r? a(r?|num)"
  },
  "slez": {
    "name": "slez",
    "description": "Регистр = 1, если a <= 0, иначе 0",
    "example": "slez r? a(r?|num)"
  },
  "sgez": {
    "name": "sgez",
    "description": "Регистр = 1, если a >= 0, иначе 0",
    "example": "sgez r? a(r?|num)"
  },
  "seqz": {
    "name": "seqz",
    "description": "Регистр = 1, если a == 0, иначе 0",
    "example": "seqz r? a(r?|num)"
  },
  "snez": {
    "name": "snez",
    "description": "Регистр = 1, если a != 0, иначе 0",
    "example": "snez r? a(r?|num)"
  },
  "sapz": {
    "name": "sapz",
    "description": "Регистр = 1, если |a| <= float.epsilon \\* 8, иначе 0",
    "example": "sapz r? a(r?|num) b(r?|num)"
  },
  "snaz": {
    "name": "snaz",
    "description": "Регистр = 1, если |a| > float.epsilon, иначе 0",
    "example": "snaz r? a(r?|num) b(r?|num)"
  },
  "define": {
    "name": "define",
    "description": "Создает метку, которая будет заменена на протяжении всей программы указанным значением.",
    "example": "define str num"
  },
  "sleep": {
    "name": "sleep",
    "description": "Приостановка выполнения программы на IC (в секундах)",
    "example": "sleep a(r?|num)"
  },
  "sin": {
    "name": "sin",
    "description": "Возвращает синус указанного угла.",
    "example": "sin r? a(r?|num)"
  },
  "asin": {
    "name": "asin",
    "description": "Возвращает угол, синус которого является указанным значением.",
    "example": "asin r? a(r?|num)"
  },
  "tan": {
    "name": "tan",
    "description": "Возвращает тангенс указанного угла.",
    "example": "tan r? a(r?|num)"
  },
  "atan": {
    "name": "atan",
    "description": "Возвращает угол, тангенс которого является указанным значением.",
    "example": "atan r? a(r?|num)"
  },
  "cos": {
    "name": "cos",
    "description": "Возвращает косинус указанного угла.",
    "example": "cos r? a(r?|num)"
  },
  "acos": {
    "name": "acos",
    "description": "Возвращает косинус указанного угла.",
    "example": "acos r? a(r?|num)"
  },
  "atan2": {
    "name": "atan2",
    "description": "Returns the angle (radians) whose tangent is the quotient of two specified values: a (y) and b (x)",
    "example": "atan2 r? a(r?|num) b(r?|num)"
  },
  "brnan": {
    "name": "brnan",
    "description": "Relative branch to line b if a is not a number (NaN)",
    "example": "brnan a(r?|num) b(r?|num)"
  },
  "bnan": {
    "name": "bnan",
    "description": "Branch to line b if a is not a number (NaN)",
    "example": "bnan a(r?|num) b(r?|num)"
  },
  "snan": {
    "name": "snan",
    "description": "Register = 1 if a is NaN, otherwise 0",
    "example": "snan r? a(r?|num)"
  },
  "snanz": {
    "name": "snanz",
    "description": "Register = 0 if a is NaN, otherwise 1",
    "example": "snanz r? a(r?|num)"
  },
  "lbs": {
    "name": "lbs",
    "description": "Loads LogicSlotType from slotIndex from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "example": "lbs r? deviceHash slotIndex logicSlotType batchMode"
  },
  "lbn": {
    "name": "lbn",
    "description": "Loads LogicType from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "example": "lbn r? deviceHash nameHash logicType batchMode"
  },
  "sbn": {
    "name": "sbn",
    "description": "Stores register value to LogicType on all output network devices with provided type hash and name.",
    "example": "sbn deviceHash nameHash logicType r?"
  },
  "lbns": {
    "name": "lbns",
    "description": "Loads LogicSlotType from slotIndex from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "example": "lbns r? deviceHash nameHash slotIndex logicSlotType batchMode"
  },
  "ss": {
    "name": "ss",
    "description": "Stores register value to device stored in a slot LogicSlotType on device.",
    "example": "ss d? slotIndex logicSlotType r?"
  },
  "sbs": {
    "name": "sbs",
    "description": "Stores register value to LogicSlotType on all output network devices with provided type hash in the provided slot.",
    "example": "sbs deviceHash slotIndex logicSlotType r?"
  },
  "srl": {
    "name": "srl",
    "description": "Performs a bitwise logical right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with zeros",
    "example": "srl r? a(r?|num) b(r?|num)"
  },
  "sra": {
    "name": "sra",
    "description": "Performs a bitwise arithmetic right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with a copy of the sign bit (the most significant bit).",
    "example": "sra r? a(r?|num) b(r?|num)"
  },
  "sll": {
    "name": "sll",
    "description": "Performs a bitwise logical left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with zeros.",
    "example": "sll r? a(r?|num) b(r?|num)"
  },
  "sla": {
    "name": "sla",
    "description": "Performs a bitwise arithmetic left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with a copy of the sign bit (the most significant bit).",
    "example": "sla r? a(r?|num) b(r?|num)"
  },
  "not": {
    "name": "not",
    "description": "Performs a bitwise logical NOT operation flipping each bit of the input value, resulting in a binary complement. If a bit is 1, it becomes 0, and if a bit is 0, it becomes 1.",
    "example": "not r? a(r?|num)"
  },
  "ld": {
    "name": "ld",
    "description": "Loads device LogicType to register by direct ID reference.",
    "example": "ld r? id(r?|num) logicType"
  },
  "sd": {
    "name": "sd",
    "description": "Stores register value to LogicType on device by direct ID reference.",
    "example": "sd id(r?|num) logicType r?"
  },
  "poke": {
    "name": "poke",
    "description": "Stores the provided value at the provided address in the stack.",
    "example": "poke address(r?|num) value(r?|num)"
  },
  "getd": {
    "name": "getd",
    "description": "Seeks directly for the provided device id, attempts to read the stack value at the provided address, and places it in the register.",
    "example": "getd r? id(r?|num) address(r?|num)"
  },
  "putd": {
    "name": "putd",
    "description": "Seeks directly for the provided device id, attempts to write the provided value to the stack at the provided address.",
    "example": "putd id(r?|num) address(r?|num) value(r?|num)"
  },
  "get": {
    "name": "get",
    "description": "Using the provided device, attempts to read the stack value at the provided address, and places it in the register.",
    "example": "get r? d? address(r?|num)"
  },
  "put": {
    "name": "put",
    "description": "Using the provided device, attempts to write the provided value to the stack at the provided address.",
    "example": "put d? address(r?|num) value(r?|num)"
  },
  "clr": {
    "name": "clr",
    "description": "Clears the stack memory for the provided device.",
    "example": "clr d?"
  },
  "clrd": {
    "name": "clrd",
    "description": "Seeks directly for the provided device id and clears the stack memory of that device",
    "example": "clrd id(r?|num)"
  },
  "rmap": {
    "name": "rmap",
    "description": "Given a reagent hash, store the corresponding prefab hash that the device expects to fulfill the reagent requirement. For example, on an autolathe, the hash for Iron will store the hash for ItemIronIngot.",
    "example": "rmap r? d? reagentHash(r?|num)"
  }
}
